<?php

namespace Biblioteca\TegBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;


/**
 * tegRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class tegRepository extends EntityRepository
{
	/**
	 * Our new getAllPosts() method
	 *
	 * 1. Create & pass query to paginate method
	 * 2. Paginate will return a `\Doctrine\ORM\Tools\Pagination\Paginator` object
	 * 3. Return that object to the controller
	 *
	 * @param booleam $all false si solo se muestran los publicos, true todos los teg existentes
	 * 
	 * @return \Doctrine\ORM\Tools\Pagination\Paginator
	 */
	public function search($data = null, $all = true)
	{
        //printf("<pre>");print_r($data); printf("</pre>");
	    // Create our query bundler
	    $qb = $this->createQueryBuilder('t');
    	if (isset($data['q'])) {
            $qb->innerJoin('t.authors', 'a');
            $qb->innerJoin('t.tuthors', 'tu');
            $qb->innerJoin('t.keyWords', 'k');
            
            $exprQ = $qb->expr()->orX(
                $qb->expr()->like('a.name', "'%".$data['q']."%'"),
                $qb->expr()->like('a.lastname', "'%".$data['q']."%'"),
                $qb->expr()->like('tu.name', "'%".$data['q']."%'"),
                $qb->expr()->like('tu.lastname', "'%".$data['q']."%'"),
                $qb->expr()->like('k.keyWord', "'%".$data['q']."%'"),
                $qb->expr()->like('t.cota', "'%".$data['q']."%'"),
                $qb->expr()->like('t.titulo', "'%".$data['q']."%'"),
                $qb->expr()->like('t.escuela', "'%".$data['q']."%'"),
                $qb->expr()->like('t.resumen', "'%".$data['q']."%'")
            );
        }
        else
        {
            $exprQ = $qb->expr()->isNotNull('t.titulo');
        }

        //Si se filtra por Escuela se 
        if (isset($data['escuela'])){
            $exprEscuela = $qb->expr()->eq('t.escuela', "'".$data['escuela']."'");}
        else{$exprEscuela = $qb->expr()->isNotNull('t.escuela');}

        
        //Si rangos de fechas es ignorado
        if (!isset($data['desde']) && !isset($data['hasta'])){
            $exprInteval= $qb->expr()->isNotNull('t.publicacion');}
        else{
            //Si ingreso rango inferior
            if (isset($data['desde'])) {
                $desde = "'".$data['desde']->format('Y-m-d')."'";
            }else{$desde = 't.publicacion';}
            //Si ingreso rango superior
            if (isset($data['hasta'])) {
                $hasta = "'".$data['hasta']->format('Y-m-d')."'";
            }else{$hasta = 't.publicacion';}
            $exprInteval = $qb->expr()->between('t.publicacion', $desde, $hasta);
        }
        //Si la consulta se hace sobre todos los TEGs
        if ($all){
            $exprPublished = $qb->expr()->isNotNull('t.published');
        }
        else{
            $exprPublished = $qb->expr()->eq('t.published', "'".(true)."'");
        }
        //Se unen en AND las codiciones
        $condiciones = $qb->expr()->andX(
                    $exprPublished,
                    $exprEscuela,
                    $exprInteval,
                    $exprQ
        );
        
        $qb->where($qb->expr()->andX($condiciones))
        ->orderBy('t.publicacion', 'DESC')->getQuery();

        
	    return $qb;
	}

    /**
     *
     *
     * @param boolean $all, true: se muestra todo los teg
     *                     false: se muestra SOLO las que esten publicas
     * @return Doctrine\ORM\Query $dql   DQL Query Object
     */
    public function findAllQuery($all = true)
    {
        // Create our query
        $query = $this->createQueryBuilder('t');
        
        if ($all){
            $query->orderBy('t.publicacion', 'DESC')->getQuery();
        }
        else{ 
            
            $query->where($query->expr()->eq('t.published', "true"))->orderBy('t.publicacion', 'DESC')->getQuery();

        }

        return $query;
    }
}
